
#use <conio>
#use <string>

 /*********************************************************************
              Interface
 **********************************************************************/

// hufftree is defined in pq-client.c0

// Returns true if a tree is a Huffman treef; false - otherwise
bool is_hufftree(hufftree H);

// Returns true if a node is a leaf; false - otherwise
bool is_hufftree_leaf(hufftree H)
//@requires H != NULL;
;

// Returns true if a node is an internal node; false - otherwise
bool is_hufftree_internal_node(hufftree H)
//@requires H != NULL;
;

// Returns the total number of nodes in the Huffman tree H
int hufftree_size(hufftree H)
//@requires is_hufftree(H);
;

// Returns the number of leaves in the Huffman tree H
int hufftree_count_leaves(hufftree H)
//@requires is_hufftree(H);
;

// Constructs an optimal encoding using Huffman's algorithm.
hufftree build_hufftree(char[] chars, int[] freqs, int n)
//@requires 1 < n && n <= \length(chars) && \length(chars) == \length(freqs);
//@ensures is_hufftree(\result);
//@ensures hufftree_count_leaves(\result) == n;
;

//Creates a hashtable mapping characters to bitstrings from the given Huffman tree H
hashtable hufftree_to_hashtable(hufftree H)
//@requires is_hufftree(H);
;

// Encodes the input string using the map M 
bitstring encode_map (hashtable M, string input)
//@ensures is_bitstring(\result);
;

// Encodes the input string using the Huffman tree H and the above mapping
bitstring encode (hufftree H, string input)
//@requires is_hufftree(H);
//@ensures is_bitstring(\result);
;

struct decode_result {
  char decoded;
  string leftovers;
};

// Decodes the bit string  based on the Huffman tree H:
// if some prefix of bits decodes to a character, then
// returns a decode_result with that character, and
// any bits leftover.  otherwise returns NULL
struct decode_result* decode(hufftree H, string bits)
//@requires is_hufftree(H);
//@requires is_bitstring(bits);
//@ensures \result == NULL || is_bitstring(\result->leftovers);
;


 /*********************************************************************
              Your implementation
 **********************************************************************/


//checks if current hufftree is a leaf
bool is_hufftree_leaf(struct hufftree_node * H)
{
  return (H->value != '\0' && H->left == NULL && H->right == NULL);
}

//checks if current hufftree is an internal node
bool is_hufftree_internal_node(struct hufftree_node * H)
{
  return (H->value == '\0' 
          && is_hufftree(H->left) && is_hufftree(H->right)
          && H->frequency == (H->left->frequency + H->right->frequency));
}

//checks if current hufftree is a valid hufftree
bool is_hufftree(struct hufftree_node * H) {
  return (H != NULL && H->frequency > 0 
          && (is_hufftree_leaf(H) || is_hufftree_internal_node(H)));
}

//computes hufftree size 
int hufftree_size(hufftree H)
{
  if (is_hufftree_leaf(H)) {
    return 1;
  }
  else {
    return (1+ hufftree_size(H->left) + hufftree_size(H->right));
  }
}

//computes number of leaves in the given hufftree
int hufftree_count_leaves(hufftree H)
{
  if (is_hufftree_leaf(H)) {
    return 1;
  }
  else {
    return (hufftree_count_leaves(H->left) + hufftree_count_leaves(H->right));
  }
}

//constructs an optimal encoding for an n-character alphabet given by the first n characters of 
//chars[] (contains characters) and freqs[] (contains characters' frequencies); 

hufftree build_hufftree(char[] chars, int[] freqs, int n)
//@requires 1 < n && n <= \length(chars) && \length(chars) == \length(freqs);
//@ensures is_hufftree(\result);
//@ensures hufftree_count_leaves(\result) == n;
{

  heap priorityQ = pq_new(n);

  hufftree HT = alloc(struct hufftree_node);

  for(int i=0 ; i<n; i++ ){

    HT = alloc(struct hufftree_node);
    HT->value = chars[i];
    HT->frequency = freqs[i];
    HT->left = NULL;
    HT->right= NULL;
    pq_insert(priorityQ,HT);

  }

  hufftree parent_node = HT;

  while(pq_size(priorityQ) > 1){

    hufftree first_node = pq_delmin(priorityQ);
    hufftree second_node = pq_delmin(priorityQ);
    parent_node = alloc(struct hufftree_node);
    parent_node->value = '\0';
    parent_node->frequency = first_node->frequency + second_node->frequency;
    parent_node->left = first_node;
    parent_node->right = second_node;
    pq_insert(priorityQ, parent_node);
  }

  return parent_node;

}

//maps characters to their corresponding Huffman-encoded bitstrings.

hashtable hufftree_to_hashtable(hufftree H)
//@requires is_hufftree(H);
//@ensures is_hashtable(\result);
{

  stack S = stack_new(hufftree_size(H));
  push(S,pair_hufftree_with_path(H,""));
  hashtable Hash_T = hashtable_new(hufftree_count_leaves(H));

  while(!stack_empty(S)){

    stack_elem SE = pop(S);

    if(is_hufftree_leaf(SE->tree))
    {
      hashtable_elem Hash_elem = alloc(struct char_with_string);
      Hash_elem->s = SE->path;
      Hash_elem->c = SE->tree->value;
      hashtable_insert(Hash_T, Hash_elem);
    }
    else if(is_hufftree_internal_node(SE->tree)){
      stack_elem SE1 = alloc(struct hufftree_with_path);
      stack_elem SE2 = alloc(struct hufftree_with_path);
      SE1 = pair_hufftree_with_path(SE->tree->left, string_join(SE->path, "0"));
      SE2 = pair_hufftree_with_path(SE->tree->right, string_join(SE->path, "1"));
      push(S,SE1);
      push(S,SE2);
    }
    
  }

  return Hash_T;

}

// encodes the given string input
// M maps the characters in input to their codes

bitstring encode_map(hashtable M, string input) //*O(n)*//
//@requires is_hashtable(M);

{

  string bitTot = "";
  string bitPart= "";

  for(int i=0 ; i<string_length(input); i++)
  {
     bitPart = hashtable_lookup(M, string_to_chararray(input)[i])->s;
     bitTot = string_join(bitTot, bitPart);

  }

  return bitTot;


}

// encodes the given string by using encode_map and creating an appropriate hash map.

bitstring encode(hufftree H, string input)
//@requires is_hufftree(H);

{

  hashtable hashT = hufftree_to_hashtable(H);
  string bitStr = encode_map(hashT, input);
  return bitStr;
}

// Decodes the bit string based on the Huffman tree H.
struct decode_result* decode(hufftree H, string bits)
//@requires is_hufftree(H);
//@requires is_bitstring(bits);
{ 
  int i = 0;

  while(!is_hufftree_leaf(H)){

    if(!(i<string_length(bits))){
       return NULL;
    }
    else if(string_charat(bits,i) == '0'){
      H = H->left;  
      i++;    
    }
    else if(string_charat(bits,i) == '1'){
      H = H->right;
      i++;
    }
  }
  struct decode_result* decodeResult= alloc(struct decode_result);
  decodeResult->decoded = H->value;
  decodeResult->leftovers = string_sub(bits, i, string_length(bits));
  return decodeResult;
}





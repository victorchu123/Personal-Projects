/* 
 * Bounded priority queues
 * Library implementation as heaps
 *
 * Principles of Imperative Computation
 * */

/*** Client interface ***/

// typedef ______________ pq_elem;

int pq_elem_priority(pq_elem e);


/*** Library interface ***/

// typedef _______________ pq;
typedef struct heap_header* pq;

bool pq_empty(pq P);
bool pq_full(pq P);
pq pq_new(int capacity)
/*@requires capacity > 0; @*/
/*@ensures pq_empty(\result); @*/ ;

void pq_insert(pq P, pq_elem e) /* insert e into P */
/*@requires !pq_full(P); @*/ ;

pq_elem pq_min(pq P) /* return minimum, leave it */
/*@requires !pq_empty(P); @*/ ;

pq_elem pq_delmin(pq P) /* return minimum, delete minimum */
/*@requires !pq_empty(P); @*/ ;

int pq_size(pq P);

/*** Library implementation ***/

struct heap_header {
  int limit;      /* limit = capacity+1 */
  int next;       /* 1 <= next && next <= limit */
  pq_elem[] data;    /* \length(data) == limit */
};
typedef struct heap_header* heap;

/* Just checks the basic invariants described above, none
 * of the ordering invariants. */
bool is_safe_heap(struct heap_header* H) {
  if (H == NULL) return false;
  if (!(1 <= H->next && H->next <= H->limit)) return false;
  //@assert \length(H->data) == H->limit;
  return true;
}

int priority(heap H, int i) 
//@requires is_safe_heap(H);
//@requires 0 <= i && i < H->limit;
{
  return pq_elem_priority(H->data[i]);
}

void swap(pq_elem[] A, int i, int j)
//@requires 0 <= i && i < \length(A);
//@requires 0 <= j && j < \length(A);
{
  pq_elem tmp = A[i];
  A[i] = A[j];
  A[j] = tmp;
}

int parent(int i)
//@requires i >= 1;
{
  return i/2;
}

int left(int i)
//@requires i >= 1;
{
  return 2*i;
}

int right(int i)
//@requires i >= 1;
{
  return 2*i + 1;
}

bool is_heap(struct heap_header* H)
{

  if (!is_safe_heap(H)) return false;

  for (int i = 2; i < H->next; i = i + 1) 
    //@loop_invariant 2 <= i; 
    {
      if (!(priority(H,i) >= priority(H,parent(i)))) return false;
    }

  return true;

}

bool exists(int node, int limit) {
  return (1 <= node && node < limit);
}

/* H is a valid heap, except possibly at except,
 * looking up in the tree */
bool is_heap_except_up(heap H, int except)
// ensures is_heap_except_up(H,1) == is_heap(H)
{
  if (!is_safe_heap(H)) {error("A"); return false;}
  
  for (int n = 2; n < H->next ; n = n + 1)
    //@ loop_invariant (2 <= n);
    {
      
      if (n != except) {
        if (!(priority(H,n) >= priority(H,parent(n)))) {error("B"); return false;}
      }
      
      if ((n == left(except) || n == right(except))
          && exists(parent(except),H->next)) {
        if (!(priority(H,n) >= priority(H,parent(except)))) {return false;}
      }

    }
  return true;

}

/* H is a valid heap, except possibly at except,
 * looking down in the tree */
/* If 2*except >= H->next (i.e. except is a leaf)
   then is_heap_except_down(H, except) == is_heap(H) */
bool is_heap_except_down(heap H, int except) {
  if (!is_safe_heap(H)) return false;

  for (int j = 2; j < H->next; j = j + 1) 
    //@loop_invariant 2 <= j; 
    {
      if (parent(j) != except) {
        if (!(priority(H, j) >= priority(H, parent(j)))) return false;
      }

      /* for children of node except, check grandparent  */
      if ((j == left(except) || j == right(except))
          && exists(parent(except),H->next)) {
        if (!(priority(H,j) >= priority(H,parent(except)))) return false;
      }
    }  

  return true;
}


void pq_insert(heap H, pq_elem e)
//@requires is_heap(H);
//@ensures is_heap(H);
{

  H->data[H->next] = e;
  int except = H->next;
  H->next = H->next + 1;

  // not necessarily is_heap(H)
  //@assert is_heap_except_up(H,except);

  // sift up

  while (except != 1 && 
         priority(H,except) < priority(H,parent(except)))
    //@ loop_invariant is_heap_except_up(H,except);
    {
      swap(H->data,except,parent(except));
      except = parent(except);
    }

  // @assert is_heap(H);

}

bool pq_empty(heap H) 
//@requires is_heap(H);
{
  return H->next == 1;
}

bool pq_full(heap H)
//@requires is_heap(H);
{
  return H->next == H->limit;
}

heap pq_new(int capacity)
//@requires capacity > 0;
//@ensures is_heap(\result) && pq_empty(\result);
{
  heap H = alloc(struct heap_header);
  H->limit = capacity+1;
  H->next = 1;
  H->data = alloc_array(pq_elem, capacity+1);
  return H;
}

pq_elem pq_min(heap H)
//@requires is_heap(H) && !pq_empty(H);
//@ensures is_heap(H);
{
  return H->data[1];
}

void sift_down(heap H, int except)
//@requires 1 <= except && except < H->next;
//@requires is_heap_except_down(H, except);
//@ensures is_heap(H);
{ 

  int n = H->next; // n is one past the last leaf

  while (exists(left(except), n))
    //@loop_invariant exists(except,n);
    //@loop_invariant is_heap_except_down(H,except);
    {
      if (priority(H,except) <= priority(H,left(except))
          && (!exists(right(except),n) || priority(H,except) <= priority(H,right(except))))
        {
          //everything is in the right place
          return;
        }
      if (!exists(right(except),n) || priority(H,left(except)) < priority(H,right(except))) {
        swap(H->data, except, left(except));
        except = left(except);
      } else {
        //@assert exists(right(except),n) && priority(H, right(except)) <= priority(H,left(except));
        swap(H->data, except, right(except));
        except = right(except);
      }
    }

  return;
}

pq_elem pq_delmin(heap H)
//@requires is_heap(H) && !pq_empty(H);
//@ensures is_heap(H);
{ 
  pq_elem min = H->data[1];
  H->data[1] = H->data[H->next-1]; // move last leaf to root
  H->next = H->next-1; // delete last leaf
  if (H->next > 1) sift_down(H, 1); 
  return min;
}

int pq_size(heap H)
//@requires is_heap(H);
{
  return H->next-1;
}
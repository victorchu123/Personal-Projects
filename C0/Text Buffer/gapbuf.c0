/*
 * Gap Buffers
 * 
 * A gap buffer data structure is represented by an array of chars
 * stored along with its size (limit) and two integers representing
 * the beginning (inclusive, gap start) and end (exclusive, gap end)
 * of the gap.
 * 
 * */

#use <string>

typedef struct gapbuf_header* gapbuf;
typedef gapbuf elem; // The data in linked lists will be gap buffers

/*** Interface ***/

struct gapbuf_header {
  int limit;     /* limit > 0                      */
  char[] buffer; /* \length(buffer) == limit       */
  int gap_start; /* 0 <= gap_start                 */
  int gap_end;   /* gap_start  <= gap_end <= limit */
};

bool is_gapbuf(struct gapbuf_header* G);
  

bool gapbuf_empty(gapbuf G);    /* Returns true if the buffer is empty */
bool gapbuf_full(gapbuf G);     /* Returns true if the buffer is full  */
bool gapbuf_at_left(gapbuf G);  /* Returns true if the gap is at the   */
                                /*   left end of the buffer            */
bool gapbuf_at_right(gapbuf G); /* Returns true if the gap is at the   */
                                /*   right end of the buffer           */

gapbuf gapbuf_new(int limit);   /* Create a new gapbuf of size limit  */
void gapbuf_forward(gapbuf G);  /* Move the gap forward, to the right */
void gapbuf_backward(gapbuf G); /* Move the gap backward, to the left */
void gapbuf_insert(gapbuf G, char c); /* Insert the char c before the gap    */
void gapbuf_delete(gapbuf G);         /* Delete the character before the gap */

/*** Implementation ***/

gapbuf gapbuf_new(int limit)
  //@requires limit > 0;
  //@ensures is_gapbuf(\result);
  //@ensures gapbuf_empty(\result);
{
  
  gapbuf G= alloc(struct gapbuf_header);
  G->buffer = alloc_array(char, limit);
  G->limit = limit;
  G->gap_start = 0;
  G->gap_end = limit;

  return G;

}

void gapbuf_forward(gapbuf G)
  //@requires is_gapbuf(G);
  //@requires !gapbuf_at_right(G);
  //@ensures is_gapbuf(G);
{
  G->buffer[G->gap_start] = G->buffer[G->gap_end]; 
  G->gap_end++;
  G->gap_start++;

}

void gapbuf_backward(gapbuf G)
  //@requires is_gapbuf(G);
  //@requires !gapbuf_at_left(G);
  //@ensures is_gapbuf(G);
{
  //char temp = G->buffer[G->gap_start-1];
  G->buffer[G->gap_end-1] = G->buffer[G->gap_start-1];
  G->gap_start--;
  G->gap_end--;
  //G->buffer[G->gap_end] = temp;
}
 
void gapbuf_insert(gapbuf G, char c)
  //@requires is_gapbuf(G);
  //@requires !gapbuf_full(G);
  //@ensures is_gapbuf(G);
{

  G->gap_start++;
  G->buffer[G->gap_start-1] = c;
}

void gapbuf_delete(gapbuf G)
  //@requires is_gapbuf(G);
  //@requires !gapbuf_empty(G);
  //@requires !gapbuf_at_left(G);
  //@ensures is_gapbuf(G);
{
  G->gap_start--;

}

bool is_gapbuf(struct gapbuf_header* G)

{
  //@assert \length(G->buffer) == G->limit;

  if(G->gap_start < 0){
    return false;
  }

  if(G->gap_end < G->gap_start){
    return false;
  }
  if(G->limit < G->gap_end){
    return false;
  }
  if(G->limit <= 0){
    return false;
  }

  return true;

}

bool gapbuf_empty(gapbuf G)
  //@requires is_gapbuf(G);
  //@ensures is_gapbuf(G);
{

  if (G->gap_end - G->gap_start == G->limit){

    return true;
  }else{
    return false;

  }

}

bool gapbuf_full(gapbuf G)

  //@requires is_gapbuf(G);
  //@ensures is_gapbuf(G);
{

  if(G->gap_start == G->gap_end){
    return true;
  }else{

    return false;
  }

}

bool gapbuf_at_left(gapbuf G)
  //@requires is_gapbuf(G);
  //@ensures is_gapbuf(G);
{

  if(G->gap_start == 0){

    return true;
  }else{

    return false;
  }

}

bool gapbuf_at_right(gapbuf G)
  //@requires is_gapbuf(G);
  //@ensures is_gapbuf(G);
{

  if(G->gap_end == G->limit){

    return true;
  }else{

    return false;
  }
}

void test_gapbuf() {

  gapbuf G = alloc(struct gapbuf_header);
  G->limit = 10;
  G->buffer = alloc_array(char, 10);
  G->gap_start = 0;
  G->gap_end = 10;

  assert (is_gapbuf(G));
  
  G->gap_start = -1;
  
  assert (!is_gapbuf(G));

  G->gap_end = -2;

  assert(!is_gapbuf(G));

  G->gap_start = 0;
  G->gap_end = 5; 

  assert(is_gapbuf(G));

  /*this makes the assert fail
  G->limit = 9;

  assert(!is_gapbuf(G));

  */

  assert (!gapbuf_empty(G));

  G->gap_start = 5;

  assert (gapbuf_full(G));

  G->gap_start = 0;

  assert(gapbuf_at_left(G));

  G->gap_end = 10;

  assert(gapbuf_at_right(G));


}